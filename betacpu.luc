module betacpu (
    input clk,  // clock
    input rst,  // reset
    
    input button[4],
    
    output column_1[16],
    output column_2[16],
    output column_3[16],
    output column_4[16],
    
    output comboinc[4],
    output scoreinc[4]
  ) {
  
  // temporary variables
  sig inputALU_a[16];
  sig inputALU_b[16];
  
  alu game_alu;
  
  .clk(clk){
    
    .rst(rst){
      controlunit game_cu;
      regfile game_reg;
      
      random_row randgen;
    }
  }
  
  always {
  
    // light arrays to be displayed for the game
    column_1 = game_reg.column_1;
    column_2 = game_reg.column_2;
    column_3 = game_reg.column_3;
    column_4 = game_reg.column_4;
    
    // combo inc to be displayed for the game
    comboinc = game_cu.combo_inc[3:0];
    // score inc to be displayed for the game
    scoreinc = game_cu.score_inc[3:0];
    
    // button input for changing states in the control unit
    game_cu.button = button;
    
    // random generation of column to add new note into
    game_cu.randgen = randgen.out;
    
    // send signals from the control unit to retrieve data from the regfile
    game_reg.we = game_cu.we;
    game_reg.ra = game_cu.ra;
    game_reg.rb = game_cu.rb;
    game_reg.rc = game_cu.rc;
    
    // directly reference value from a register called in rb for branching comparisons
    game_cu.rb_fromreg = game_reg.out_b;
    
    // asel signal output
    case(game_cu.asel){
      b00: inputALU_a = game_reg.out_a;
      b01: inputALU_a = 16h2;
      b10: inputALU_a = 16h3;
      default: inputALU_a = 0;
    }
    
    // bsel signal output
    case(game_cu.bsel){
      b000: inputALU_b = game_reg.out_b;
      b001: inputALU_b = 16hBF;
      b010: inputALU_b = 16hDF;
      b011: inputALU_b = 16hEF;
      b100: inputALU_b = 16h1;
      b101: inputALU_b = 16h80;
      b110: inputALU_b = 16h2;
      b111: inputALU_b = 16h4;
      default: inputALU_b = 0;
    }
    
    // alu calculations
    game_alu.a = inputALU_a;
    game_alu.b = inputALU_b;
    game_alu.alufn_signal = game_cu.alufn;
    
    // data to be stored in regfile
    case(game_cu.wdsel){
      b01: game_reg.data = 16h32;
      b10: game_reg.data = 16h64;
      b11: game_reg.data = 16hc8;
      default: game_reg.data = game_alu.c;
    }
    
    
  }
}
