/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module controlunit_16 (
    input clk,
    input rst,
    input [3:0] button,
    input [15:0] rb_fromreg,
    input [1:0] randgen,
    input slow_clock_in,
    output reg [5:0] alufn,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg [1:0] asel,
    output reg [2:0] bsel,
    output reg we,
    output reg [1:0] wdsel,
    output reg [1:0] set_speed,
    output reg [15:0] combo_inc,
    output reg [15:0] score_inc
  );
  
  
  
  reg [1:0] M_difficulty_d, M_difficulty_q = 1'h0;
  reg [1:0] M_rand_store_d, M_rand_store_q = 1'h0;
  localparam GAME_START_gameFSM = 6'd0;
  localparam WAIT_DIFFICULTY_gameFSM = 6'd1;
  localparam DIFFICULTY_EASY_gameFSM = 6'd2;
  localparam DIFFICULTY_NORMAL_gameFSM = 6'd3;
  localparam DIFFICULTY_HARD_gameFSM = 6'd4;
  localparam SET_COUNT_gameFSM = 6'd5;
  localparam INC_COUNT_gameFSM = 6'd6;
  localparam GAME_IDLE_gameFSM = 6'd7;
  localparam SHL_COL0_gameFSM = 6'd8;
  localparam SHL_COL1_gameFSM = 6'd9;
  localparam SHL_COL2_gameFSM = 6'd10;
  localparam SHL_COL3_gameFSM = 6'd11;
  localparam MISS_1_gameFSM = 6'd12;
  localparam MISS_2_gameFSM = 6'd13;
  localparam MISS_3_gameFSM = 6'd14;
  localparam MISS_MASK_gameFSM = 6'd15;
  localparam CHECK_MISS_gameFSM = 6'd16;
  localparam BRANCH_CHECK_MISS_gameFSM = 6'd17;
  localparam BREAK_COMBO_gameFSM = 6'd18;
  localparam CHECK_COUNT_gameFSM = 6'd19;
  localparam BRANCH_COUNT_gameFSM = 6'd20;
  localparam STORE_RAND_gameFSM = 6'd21;
  localparam ADD_NOTE_gameFSM = 6'd22;
  localparam CLEAR_1_gameFSM = 6'd23;
  localparam CLEAR_2_gameFSM = 6'd24;
  localparam CLEAR_3_gameFSM = 6'd25;
  localparam CHECK_CLEAR_gameFSM = 6'd26;
  localparam BRANCH_CLEAR_gameFSM = 6'd27;
  localparam DISPLAY_SCORE_gameFSM = 6'd28;
  localparam GAME_OVER_gameFSM = 6'd29;
  localparam PUSH_COL0_gameFSM = 6'd30;
  localparam PUSH_COL1_gameFSM = 6'd31;
  localparam PUSH_COL2_gameFSM = 6'd32;
  localparam PUSH_COL3_gameFSM = 6'd33;
  localparam STORE_COL0_gameFSM = 6'd34;
  localparam STORE_COL1_gameFSM = 6'd35;
  localparam STORE_COL2_gameFSM = 6'd36;
  localparam STORE_COL3_gameFSM = 6'd37;
  localparam BRANCH_CHECK_INPUT_gameFSM = 6'd38;
  localparam COMBO_PERFECT_gameFSM = 6'd39;
  localparam BRANCH_SCORE_PERFECT_gameFSM = 6'd40;
  localparam MULTIPLIER_1_PERFECT_gameFSM = 6'd41;
  localparam MULTIPLIER_2_PERFECT_gameFSM = 6'd42;
  localparam MULTIPLIER_4_PERFECT_gameFSM = 6'd43;
  localparam ADD_PERFECT_gameFSM = 6'd44;
  localparam RECORD_PERFECT_gameFSM = 6'd45;
  localparam CLEAR_PERFECT_gameFSM = 6'd46;
  localparam COMBO_GOOD_gameFSM = 6'd47;
  localparam BRANCH_SCORE_GOOD_gameFSM = 6'd48;
  localparam MULTIPLIER_1_GOOD_gameFSM = 6'd49;
  localparam MULTIPLIER_2_GOOD_gameFSM = 6'd50;
  localparam MULTIPLIER_4_GOOD_gameFSM = 6'd51;
  localparam ADD_GOOD_gameFSM = 6'd52;
  localparam RECORD_GOOD_gameFSM = 6'd53;
  localparam CLEAR_GOOD_gameFSM = 6'd54;
  localparam COMBO_MISS_gameFSM = 6'd55;
  localparam CLEAR_MISS_gameFSM = 6'd56;
  localparam BRANCH_UPDATE_COLUMN_gameFSM = 6'd57;
  localparam UPDATE_COL0_gameFSM = 6'd58;
  localparam UPDATE_COL1_gameFSM = 6'd59;
  localparam UPDATE_COL2_gameFSM = 6'd60;
  localparam UPDATE_COL3_gameFSM = 6'd61;
  
  reg [5:0] M_gameFSM_d, M_gameFSM_q = GAME_START_gameFSM;
  
  localparam ADD = 6'h00;
  
  localparam MUL = 6'h02;
  
  localparam AND = 6'h18;
  
  localparam OR = 6'h1e;
  
  localparam ALDR = 6'h1a;
  
  localparam SHL = 6'h20;
  
  localparam CMPEQ = 6'h33;
  
  localparam CMPLE = 6'h37;
  
  always @* begin
    M_gameFSM_d = M_gameFSM_q;
    M_difficulty_d = M_difficulty_q;
    M_rand_store_d = M_rand_store_q;
    
    alufn = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we = 1'h0;
    wdsel = 1'h0;
    set_speed = M_difficulty_q;
    combo_inc = 1'h0;
    score_inc = 1'h0;
    
    case (M_gameFSM_q)
      GAME_START_gameFSM: begin
        if (button[0+0-:1]) begin
          M_gameFSM_d = WAIT_DIFFICULTY_gameFSM;
        end else begin
          M_gameFSM_d = GAME_START_gameFSM;
        end
      end
      WAIT_DIFFICULTY_gameFSM: begin
        if (button[1+0-:1]) begin
          M_gameFSM_d = DIFFICULTY_EASY_gameFSM;
        end else begin
          if (button[2+0-:1]) begin
            M_gameFSM_d = DIFFICULTY_NORMAL_gameFSM;
          end else begin
            if (button[3+0-:1]) begin
              M_gameFSM_d = DIFFICULTY_HARD_gameFSM;
            end else begin
              M_gameFSM_d = WAIT_DIFFICULTY_gameFSM;
            end
          end
        end
      end
      DIFFICULTY_EASY_gameFSM: begin
        M_difficulty_d = 1'h1;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h1;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      DIFFICULTY_NORMAL_gameFSM: begin
        M_difficulty_d = 2'h2;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h2;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      DIFFICULTY_HARD_gameFSM: begin
        M_difficulty_d = 2'h3;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h3;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      SET_COUNT_gameFSM: begin
        ra = 4'h4;
        rc = 4'h7;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = INC_COUNT_gameFSM;
      end
      INC_COUNT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h7;
        rc = 4'h7;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      GAME_IDLE_gameFSM: begin
        if (button[0+0-:1]) begin
          M_gameFSM_d = PUSH_COL0_gameFSM;
        end
        if (button[1+0-:1]) begin
          M_gameFSM_d = PUSH_COL1_gameFSM;
        end
        if (button[2+0-:1]) begin
          M_gameFSM_d = PUSH_COL2_gameFSM;
        end
        if (button[3+0-:1]) begin
          M_gameFSM_d = PUSH_COL3_gameFSM;
        end
        if (slow_clock_in == 1'h1) begin
          M_gameFSM_d = SHL_COL0_gameFSM;
        end
      end
      SHL_COL0_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h0;
        rc = 4'h0;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL1_gameFSM;
      end
      SHL_COL1_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h1;
        rc = 4'h1;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL2_gameFSM;
      end
      SHL_COL2_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h2;
        rc = 4'h2;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL3_gameFSM;
      end
      SHL_COL3_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h3;
        rc = 4'h3;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = MISS_1_gameFSM;
      end
      MISS_1_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h0;
        rb = 4'h1;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_2_gameFSM;
      end
      MISS_2_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h2;
        rb = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_3_gameFSM;
      end
      MISS_3_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h3;
        rb = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_MASK_gameFSM;
      end
      MISS_MASK_gameFSM: begin
        alufn = 6'h18;
        ra = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 3'h5;
        we = 1'h1;
        M_gameFSM_d = CHECK_MISS_gameFSM;
      end
      CHECK_MISS_gameFSM: begin
        alufn = 6'h33;
        ra = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 3'h5;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_MISS_gameFSM;
      end
      BRANCH_CHECK_MISS_gameFSM: begin
        rb = 4'h9;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = CHECK_COUNT_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = BREAK_COMBO_gameFSM;
        end
      end
      BREAK_COMBO_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        combo_inc = 3'h5;
        M_gameFSM_d = CHECK_COUNT_gameFSM;
      end
      CHECK_COUNT_gameFSM: begin
        alufn = 6'h37;
        ra = 4'h7;
        rb = 4'h8;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_COUNT_gameFSM;
      end
      BRANCH_COUNT_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = CLEAR_1_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = STORE_RAND_gameFSM;
        end
      end
      STORE_RAND_gameFSM: begin
        M_rand_store_d = randgen;
        M_gameFSM_d = ADD_NOTE_gameFSM;
      end
      ADD_NOTE_gameFSM: begin
        alufn = 6'h00;
        ra = M_rand_store_q;
        rc = M_rand_store_q;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = INC_COUNT_gameFSM;
      end
      CLEAR_1_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h0;
        rb = 4'h1;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = CLEAR_2_gameFSM;
      end
      CLEAR_2_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h2;
        rb = 4'hd;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = CLEAR_3_gameFSM;
      end
      CLEAR_3_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h3;
        rb = 4'hd;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = CHECK_CLEAR_gameFSM;
      end
      CHECK_CLEAR_gameFSM: begin
        alufn = 6'h33;
        ra = 4'hd;
        rb = 4'h4;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CLEAR_gameFSM;
      end
      BRANCH_CLEAR_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = GAME_IDLE_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = DISPLAY_SCORE_gameFSM;
        end
      end
      DISPLAY_SCORE_gameFSM: begin
        if (button[0+0-:1]) begin
          M_gameFSM_d = GAME_OVER_gameFSM;
        end else begin
          M_gameFSM_d = DISPLAY_SCORE_gameFSM;
        end
      end
      GAME_OVER_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        M_difficulty_d = 1'h0;
        combo_inc = 3'h5;
        score_inc = 3'h5;
        M_gameFSM_d = GAME_START_gameFSM;
      end
      PUSH_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h0;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL0_gameFSM;
      end
      PUSH_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h1;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL1_gameFSM;
      end
      PUSH_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h2;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL2_gameFSM;
      end
      PUSH_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h3;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL3_gameFSM;
      end
      STORE_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'hb;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL1_gameFSM: begin
        ra = 4'h4;
        rc = 4'hb;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL2_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hb;
        asel = 2'h1;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL3_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hb;
        asel = 2'h2;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      BRANCH_CHECK_INPUT_gameFSM: begin
        rb = 4'ha;
        if (rb_fromreg[6+0-:1] == 1'h1) begin
          M_gameFSM_d = COMBO_PERFECT_gameFSM;
        end else begin
          if (rb_fromreg[5+0-:1] == 1'h1) begin
            M_gameFSM_d = COMBO_GOOD_gameFSM;
          end else begin
            if (rb_fromreg[4+0-:1] == 1'h1) begin
              M_gameFSM_d = COMBO_MISS_gameFSM;
            end else begin
              M_gameFSM_d = GAME_IDLE_gameFSM;
            end
          end
        end
      end
      COMBO_PERFECT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h5;
        rc = 4'h5;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        combo_inc = 1'h1;
        M_gameFSM_d = BRANCH_SCORE_PERFECT_gameFSM;
      end
      BRANCH_SCORE_PERFECT_gameFSM: begin
        rb = 4'h5;
        if (rb_fromreg <= 5'h19) begin
          M_gameFSM_d = MULTIPLIER_1_PERFECT_gameFSM;
        end else begin
          if (rb_fromreg <= 6'h32) begin
            M_gameFSM_d = MULTIPLIER_2_PERFECT_gameFSM;
          end else begin
            M_gameFSM_d = MULTIPLIER_4_PERFECT_gameFSM;
          end
        end
      end
      MULTIPLIER_1_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = ADD_PERFECT_gameFSM;
      end
      MULTIPLIER_2_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 3'h6;
        we = 1'h1;
        M_gameFSM_d = ADD_PERFECT_gameFSM;
      end
      MULTIPLIER_4_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 3'h7;
        we = 1'h1;
        M_gameFSM_d = ADD_PERFECT_gameFSM;
      end
      ADD_PERFECT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h6;
        rb = 4'hc;
        rc = 4'h6;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = RECORD_PERFECT_gameFSM;
      end
      RECORD_PERFECT_gameFSM: begin
        rb = 4'hc;
        score_inc = rb_fromreg;
        M_gameFSM_d = CLEAR_PERFECT_gameFSM;
      end
      CLEAR_PERFECT_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 3'h1;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      COMBO_GOOD_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h5;
        rc = 4'h5;
        asel = 2'h0;
        bsel = 3'h4;
        we = 1'h1;
        combo_inc = 1'h1;
        M_gameFSM_d = BRANCH_SCORE_GOOD_gameFSM;
      end
      BRANCH_SCORE_GOOD_gameFSM: begin
        rb = 4'h5;
        if (rb_fromreg <= 5'h19) begin
          M_gameFSM_d = MULTIPLIER_1_GOOD_gameFSM;
        end else begin
          if (rb_fromreg <= 6'h32) begin
            M_gameFSM_d = MULTIPLIER_2_GOOD_gameFSM;
          end else begin
            M_gameFSM_d = MULTIPLIER_4_GOOD_gameFSM;
          end
        end
      end
      MULTIPLIER_1_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 3'h4;
        we = 1'h1;
        M_gameFSM_d = ADD_GOOD_gameFSM;
      end
      MULTIPLIER_2_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 3'h6;
        we = 1'h1;
        M_gameFSM_d = ADD_GOOD_gameFSM;
      end
      MULTIPLIER_4_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 3'h7;
        we = 1'h1;
        M_gameFSM_d = ADD_GOOD_gameFSM;
      end
      ADD_GOOD_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h6;
        rb = 4'hc;
        rc = 4'h6;
        asel = 2'h0;
        bsel = 3'h0;
        we = 1'h1;
        M_gameFSM_d = RECORD_GOOD_gameFSM;
      end
      RECORD_GOOD_gameFSM: begin
        rb = 4'hc;
        score_inc = rb_fromreg;
        M_gameFSM_d = CLEAR_GOOD_gameFSM;
      end
      CLEAR_GOOD_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 3'h2;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      COMBO_MISS_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        combo_inc = 3'h5;
        M_gameFSM_d = CLEAR_MISS_gameFSM;
      end
      CLEAR_MISS_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 3'h3;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      BRANCH_UPDATE_COLUMN_gameFSM: begin
        rb = 4'hb;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = UPDATE_COL0_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = UPDATE_COL1_gameFSM;
        end
        if (rb_fromreg == 16'h0002) begin
          M_gameFSM_d = UPDATE_COL2_gameFSM;
        end
        if (rb_fromreg == 16'h0003) begin
          M_gameFSM_d = UPDATE_COL3_gameFSM;
        end
      end
      UPDATE_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h0;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h1;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h2;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h3;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_difficulty_q <= 1'h0;
      M_rand_store_q <= 1'h0;
      M_gameFSM_q <= 1'h0;
    end else begin
      M_difficulty_q <= M_difficulty_d;
      M_rand_store_q <= M_rand_store_d;
      M_gameFSM_q <= M_gameFSM_d;
    end
  end
  
endmodule
