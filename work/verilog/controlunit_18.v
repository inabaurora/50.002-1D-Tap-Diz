/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module controlunit_18 (
    input clk,
    input rst,
    input start_lunatic_button,
    input rst_button,
    input [3:0] gameplay_button,
    input [1:0] shifter_button,
    input [15:0] rb_fromreg,
    input [1:0] randgen_add,
    input [1:0] randgen_lunatic,
    input slow_clock_in,
    output reg [5:0] alufn,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg [1:0] asel,
    output reg [3:0] bsel,
    output reg we,
    output reg [1:0] wdsel,
    output reg [1:0] set_speed,
    output reg [15:0] combo_inc,
    output reg [15:0] score_inc,
    output reg lunatic_check
  );
  
  
  
  reg [1:0] M_difficulty_d, M_difficulty_q = 1'h0;
  reg [1:0] M_rand_store_d, M_rand_store_q = 1'h0;
  reg M_lunatic_d, M_lunatic_q = 1'h0;
  reg [1:0] M_rand_store_lunatic_d, M_rand_store_lunatic_q = 1'h0;
  localparam GAME_START_gameFSM = 7'd0;
  localparam WAIT_DIFFICULTY_gameFSM = 7'd1;
  localparam DIFFICULTY_EASY_gameFSM = 7'd2;
  localparam DIFFICULTY_NORMAL_gameFSM = 7'd3;
  localparam DIFFICULTY_HARD_gameFSM = 7'd4;
  localparam DIFFICULTY_INSANE_gameFSM = 7'd5;
  localparam SPECIAL_GAMEMODE_gameFSM = 7'd6;
  localparam GAMEMODE_LUNATIC_gameFSM = 7'd7;
  localparam BRANCH_INITIALIZE_LUNATIC_gameFSM = 7'd8;
  localparam INITIALIZE_LUNATIC_0_gameFSM = 7'd9;
  localparam INITIALIZE_LUNATIC_1_gameFSM = 7'd10;
  localparam INITIALIZE_LUNATIC_2_gameFSM = 7'd11;
  localparam INITIALIZE_LUNATIC_3_gameFSM = 7'd12;
  localparam SET_COUNT_gameFSM = 7'd13;
  localparam INC_COUNT_gameFSM = 7'd14;
  localparam GAME_IDLE_gameFSM = 7'd15;
  localparam BRANCH_CHECK_LUNATIC_gameFSM = 7'd16;
  localparam ADD_LUNATIC_NOTE_gameFSM = 7'd17;
  localparam BRANCH_CHECK_LUNATIC_DIFFICULTY_gameFSM = 7'd18;
  localparam EASY_LUNATIC_COUNT_gameFSM = 7'd19;
  localparam MEDIUM_LUNATIC_COUNT_gameFSM = 7'd20;
  localparam HARD_LUNATIC_COUNT_gameFSM = 7'd21;
  localparam INSANE_LUNATIC_COUNT_gameFSM = 7'd22;
  localparam BRANCH_RESET_COUNT_gameFSM = 7'd23;
  localparam STORE_RAND_LUNATIC_gameFSM = 7'd24;
  localparam BRANCH_CHANGE_LUNATIC_gameFSM = 7'd25;
  localparam UPDATE_LUNATIC_COL0_gameFSM = 7'd26;
  localparam UPDATE_LUNATIC_COL1_gameFSM = 7'd27;
  localparam UPDATE_LUNATIC_COL2_gameFSM = 7'd28;
  localparam UPDATE_LUNATIC_COL3_gameFSM = 7'd29;
  localparam RESET_COUNT_gameFSM = 7'd30;
  localparam SHL_COL0_gameFSM = 7'd31;
  localparam SHL_COL1_gameFSM = 7'd32;
  localparam SHL_COL2_gameFSM = 7'd33;
  localparam SHL_COL3_gameFSM = 7'd34;
  localparam MISS_1_gameFSM = 7'd35;
  localparam MISS_2_gameFSM = 7'd36;
  localparam MISS_3_gameFSM = 7'd37;
  localparam MISS_MASK_gameFSM = 7'd38;
  localparam CHECK_MISS_gameFSM = 7'd39;
  localparam BRANCH_CHECK_MISS_gameFSM = 7'd40;
  localparam BREAK_COMBO_gameFSM = 7'd41;
  localparam CHECK_COUNT_gameFSM = 7'd42;
  localparam BRANCH_COUNT_gameFSM = 7'd43;
  localparam STORE_RAND_gameFSM = 7'd44;
  localparam ADD_NOTE_gameFSM = 7'd45;
  localparam CLEAR_1_gameFSM = 7'd46;
  localparam CLEAR_2_gameFSM = 7'd47;
  localparam CLEAR_3_gameFSM = 7'd48;
  localparam MASK_TOP_8_gameFSM = 7'd49;
  localparam CHECK_CLEAR_gameFSM = 7'd50;
  localparam BRANCH_CLEAR_gameFSM = 7'd51;
  localparam ENDING_LUNATIC_COUNT_gameFSM = 7'd52;
  localparam DISPLAY_SCORE_gameFSM = 7'd53;
  localparam RESET_COL0_gameFSM = 7'd54;
  localparam RESET_COL1_gameFSM = 7'd55;
  localparam RESET_COL2_gameFSM = 7'd56;
  localparam RESET_COL3_gameFSM = 7'd57;
  localparam RESET_LUNATIC_COUNT_gameFSM = 7'd58;
  localparam GAME_OVER_gameFSM = 7'd59;
  localparam PUSH_COL0_gameFSM = 7'd60;
  localparam PUSH_COL1_gameFSM = 7'd61;
  localparam PUSH_COL2_gameFSM = 7'd62;
  localparam PUSH_COL3_gameFSM = 7'd63;
  localparam STORE_COL0_gameFSM = 7'd64;
  localparam STORE_COL1_gameFSM = 7'd65;
  localparam STORE_COL2_gameFSM = 7'd66;
  localparam STORE_COL3_gameFSM = 7'd67;
  localparam BRANCH_CHECK_INPUT_gameFSM = 7'd68;
  localparam COMBO_PERFECT_gameFSM = 7'd69;
  localparam BRANCH_SCORE_PERFECT_gameFSM = 7'd70;
  localparam MULTIPLIER_1_PERFECT_gameFSM = 7'd71;
  localparam MULTIPLIER_2_PERFECT_gameFSM = 7'd72;
  localparam MULTIPLIER_4_PERFECT_gameFSM = 7'd73;
  localparam BRANCH_LUNATIC_PERFECT_gameFSM = 7'd74;
  localparam CHECK_LUNATIC_ROW_PERFECT_gameFSM = 7'd75;
  localparam BRANCH_CHECK_LUNATIC_ROW_PERFECT_gameFSM = 7'd76;
  localparam MULITPLIER_LUNATIC_PERFECT_gameFSM = 7'd77;
  localparam ADD_PERFECT_gameFSM = 7'd78;
  localparam RECORD_PERFECT_gameFSM = 7'd79;
  localparam CLEAR_PERFECT_gameFSM = 7'd80;
  localparam COMBO_GOOD_gameFSM = 7'd81;
  localparam BRANCH_SCORE_GOOD_gameFSM = 7'd82;
  localparam MULTIPLIER_1_GOOD_gameFSM = 7'd83;
  localparam MULTIPLIER_2_GOOD_gameFSM = 7'd84;
  localparam MULTIPLIER_4_GOOD_gameFSM = 7'd85;
  localparam BRANCH_LUNATIC_GOOD_gameFSM = 7'd86;
  localparam CHECK_LUNATIC_ROW_GOOD_gameFSM = 7'd87;
  localparam BRANCH_CHECK_LUNATIC_ROW_GOOD_gameFSM = 7'd88;
  localparam MULITPLIER_LUNATIC_GOOD_gameFSM = 7'd89;
  localparam ADD_GOOD_gameFSM = 7'd90;
  localparam RECORD_GOOD_gameFSM = 7'd91;
  localparam CLEAR_GOOD_gameFSM = 7'd92;
  localparam COMBO_MISS_gameFSM = 7'd93;
  localparam CLEAR_MISS_gameFSM = 7'd94;
  localparam BRANCH_UPDATE_COLUMN_gameFSM = 7'd95;
  localparam UPDATE_COL0_gameFSM = 7'd96;
  localparam UPDATE_COL1_gameFSM = 7'd97;
  localparam UPDATE_COL2_gameFSM = 7'd98;
  localparam UPDATE_COL3_gameFSM = 7'd99;
  localparam LEFT_SHIFTER_CHECK_LUNATIC_gameFSM = 7'd100;
  localparam TEMP_STORE_COL0_gameFSM = 7'd101;
  localparam LEFT_COL0_gameFSM = 7'd102;
  localparam LEFT_COL1_gameFSM = 7'd103;
  localparam LEFT_COL2_gameFSM = 7'd104;
  localparam LEFT_COL3_gameFSM = 7'd105;
  localparam RIGHT_SHIFTER_CHECK_LUNATIC_gameFSM = 7'd106;
  localparam TEMP_STORE_COL3_gameFSM = 7'd107;
  localparam RIGHT_COL3_gameFSM = 7'd108;
  localparam RIGHT_COL2_gameFSM = 7'd109;
  localparam RIGHT_COL1_gameFSM = 7'd110;
  localparam RIGHT_COL0_gameFSM = 7'd111;
  
  reg [6:0] M_gameFSM_d, M_gameFSM_q = GAME_START_gameFSM;
  
  localparam ADD = 6'h00;
  
  localparam MUL = 6'h02;
  
  localparam AND = 6'h18;
  
  localparam OR = 6'h1e;
  
  localparam ALDR = 6'h1a;
  
  localparam SHL = 6'h20;
  
  localparam CMPEQ = 6'h33;
  
  localparam CMPLE = 6'h37;
  
  always @* begin
    M_gameFSM_d = M_gameFSM_q;
    M_difficulty_d = M_difficulty_q;
    M_lunatic_d = M_lunatic_q;
    M_rand_store_lunatic_d = M_rand_store_lunatic_q;
    M_rand_store_d = M_rand_store_q;
    
    alufn = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    asel = 1'h0;
    bsel = 1'h0;
    we = 1'h0;
    wdsel = 1'h0;
    set_speed = M_difficulty_q;
    combo_inc = 1'h0;
    score_inc = 1'h0;
    lunatic_check = M_lunatic_q;
    
    case (M_gameFSM_q)
      GAME_START_gameFSM: begin
        if (start_lunatic_button) begin
          M_gameFSM_d = WAIT_DIFFICULTY_gameFSM;
        end else begin
          M_gameFSM_d = GAME_START_gameFSM;
        end
      end
      WAIT_DIFFICULTY_gameFSM: begin
        if (gameplay_button[0+0-:1]) begin
          M_gameFSM_d = DIFFICULTY_EASY_gameFSM;
        end else begin
          if (gameplay_button[1+0-:1]) begin
            M_gameFSM_d = DIFFICULTY_NORMAL_gameFSM;
          end else begin
            if (gameplay_button[2+0-:1]) begin
              M_gameFSM_d = DIFFICULTY_HARD_gameFSM;
            end else begin
              if (gameplay_button[3+0-:1]) begin
                M_gameFSM_d = DIFFICULTY_INSANE_gameFSM;
              end else begin
                if (rst_button) begin
                  M_gameFSM_d = GAME_OVER_gameFSM;
                end else begin
                  M_gameFSM_d = WAIT_DIFFICULTY_gameFSM;
                end
              end
            end
          end
        end
      end
      DIFFICULTY_EASY_gameFSM: begin
        M_difficulty_d = 1'h0;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h1;
        M_gameFSM_d = SPECIAL_GAMEMODE_gameFSM;
      end
      DIFFICULTY_NORMAL_gameFSM: begin
        M_difficulty_d = 1'h1;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h2;
        M_gameFSM_d = SPECIAL_GAMEMODE_gameFSM;
      end
      DIFFICULTY_HARD_gameFSM: begin
        M_difficulty_d = 2'h2;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h3;
        M_gameFSM_d = SPECIAL_GAMEMODE_gameFSM;
      end
      DIFFICULTY_INSANE_gameFSM: begin
        M_difficulty_d = 2'h3;
        rc = 4'h8;
        we = 1'h1;
        wdsel = 2'h3;
        M_gameFSM_d = SPECIAL_GAMEMODE_gameFSM;
      end
      SPECIAL_GAMEMODE_gameFSM: begin
        if (start_lunatic_button) begin
          M_gameFSM_d = GAMEMODE_LUNATIC_gameFSM;
        end else begin
          if (gameplay_button[0+0-:1]) begin
            M_gameFSM_d = SET_COUNT_gameFSM;
          end else begin
            if (rst_button) begin
              M_gameFSM_d = GAME_OVER_gameFSM;
            end else begin
              M_gameFSM_d = SPECIAL_GAMEMODE_gameFSM;
            end
          end
        end
      end
      GAMEMODE_LUNATIC_gameFSM: begin
        M_lunatic_d = 1'h1;
        M_rand_store_lunatic_d = randgen_lunatic;
        M_gameFSM_d = BRANCH_INITIALIZE_LUNATIC_gameFSM;
      end
      BRANCH_INITIALIZE_LUNATIC_gameFSM: begin
        if (M_rand_store_lunatic_q == 2'h0) begin
          M_gameFSM_d = INITIALIZE_LUNATIC_0_gameFSM;
        end else begin
          if (M_rand_store_lunatic_q == 2'h1) begin
            M_gameFSM_d = INITIALIZE_LUNATIC_1_gameFSM;
          end else begin
            if (M_rand_store_lunatic_q == 2'h2) begin
              M_gameFSM_d = INITIALIZE_LUNATIC_2_gameFSM;
            end else begin
              if (M_rand_store_lunatic_q == 2'h3) begin
                M_gameFSM_d = INITIALIZE_LUNATIC_3_gameFSM;
              end
            end
          end
        end
      end
      INITIALIZE_LUNATIC_0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'hf;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      INITIALIZE_LUNATIC_1_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h3;
        we = 1'h1;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      INITIALIZE_LUNATIC_2_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h1;
        we = 1'h1;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      INITIALIZE_LUNATIC_3_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h2;
        we = 1'h1;
        M_gameFSM_d = SET_COUNT_gameFSM;
      end
      SET_COUNT_gameFSM: begin
        ra = 4'h4;
        rc = 4'h7;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = INC_COUNT_gameFSM;
      end
      INC_COUNT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h7;
        rc = 4'h7;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      GAME_IDLE_gameFSM: begin
        if (gameplay_button[0+0-:1]) begin
          M_gameFSM_d = PUSH_COL0_gameFSM;
        end
        if (gameplay_button[1+0-:1]) begin
          M_gameFSM_d = PUSH_COL1_gameFSM;
        end
        if (gameplay_button[2+0-:1]) begin
          M_gameFSM_d = PUSH_COL2_gameFSM;
        end
        if (gameplay_button[3+0-:1]) begin
          M_gameFSM_d = PUSH_COL3_gameFSM;
        end
        if (shifter_button[0+0-:1]) begin
          M_gameFSM_d = LEFT_SHIFTER_CHECK_LUNATIC_gameFSM;
        end
        if (shifter_button[1+0-:1]) begin
          M_gameFSM_d = RIGHT_SHIFTER_CHECK_LUNATIC_gameFSM;
        end
        if (rst_button) begin
          M_gameFSM_d = RESET_COL0_gameFSM;
        end
        if (slow_clock_in == 1'h1) begin
          M_gameFSM_d = BRANCH_CHECK_LUNATIC_gameFSM;
        end
      end
      BRANCH_CHECK_LUNATIC_gameFSM: begin
        if (M_lunatic_q == 1'h1) begin
          M_gameFSM_d = ADD_LUNATIC_NOTE_gameFSM;
        end else begin
          M_gameFSM_d = SHL_COL0_gameFSM;
        end
      end
      ADD_LUNATIC_NOTE_gameFSM: begin
        alufn = 6'h00;
        ra = 4'he;
        rc = 4'he;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_LUNATIC_DIFFICULTY_gameFSM;
      end
      BRANCH_CHECK_LUNATIC_DIFFICULTY_gameFSM: begin
        if (M_difficulty_q == 1'h0) begin
          M_gameFSM_d = EASY_LUNATIC_COUNT_gameFSM;
        end else begin
          if (M_difficulty_q == 1'h1) begin
            M_gameFSM_d = MEDIUM_LUNATIC_COUNT_gameFSM;
          end else begin
            if (M_difficulty_q == 2'h2) begin
              M_gameFSM_d = HARD_LUNATIC_COUNT_gameFSM;
            end else begin
              if (M_difficulty_q == 2'h3) begin
                M_gameFSM_d = INSANE_LUNATIC_COUNT_gameFSM;
              end
            end
          end
        end
      end
      EASY_LUNATIC_COUNT_gameFSM: begin
        alufn = 6'h33;
        ra = 4'he;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h8;
        we = 1'h1;
        M_gameFSM_d = BRANCH_RESET_COUNT_gameFSM;
      end
      MEDIUM_LUNATIC_COUNT_gameFSM: begin
        alufn = 6'h33;
        ra = 4'he;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h9;
        we = 1'h1;
        M_gameFSM_d = BRANCH_RESET_COUNT_gameFSM;
      end
      HARD_LUNATIC_COUNT_gameFSM: begin
        alufn = 6'h33;
        ra = 4'he;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'ha;
        we = 1'h1;
        M_gameFSM_d = BRANCH_RESET_COUNT_gameFSM;
      end
      INSANE_LUNATIC_COUNT_gameFSM: begin
        alufn = 6'h33;
        ra = 4'he;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'ha;
        we = 1'h1;
        M_gameFSM_d = BRANCH_RESET_COUNT_gameFSM;
      end
      BRANCH_RESET_COUNT_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = SHL_COL0_gameFSM;
        end else begin
          if (rb_fromreg == 16'h0001) begin
            M_gameFSM_d = STORE_RAND_LUNATIC_gameFSM;
          end
        end
      end
      STORE_RAND_LUNATIC_gameFSM: begin
        M_rand_store_lunatic_d = randgen_lunatic;
        M_gameFSM_d = BRANCH_CHANGE_LUNATIC_gameFSM;
      end
      BRANCH_CHANGE_LUNATIC_gameFSM: begin
        if (M_rand_store_lunatic_q == 2'h0) begin
          M_gameFSM_d = UPDATE_LUNATIC_COL0_gameFSM;
        end else begin
          if (M_rand_store_lunatic_q == 2'h1) begin
            M_gameFSM_d = UPDATE_LUNATIC_COL1_gameFSM;
          end else begin
            if (M_rand_store_lunatic_q == 2'h2) begin
              M_gameFSM_d = UPDATE_LUNATIC_COL2_gameFSM;
            end else begin
              if (M_rand_store_lunatic_q == 2'h3) begin
                M_gameFSM_d = UPDATE_LUNATIC_COL3_gameFSM;
              end
            end
          end
        end
      end
      UPDATE_LUNATIC_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'hf;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RESET_COUNT_gameFSM;
      end
      UPDATE_LUNATIC_COL1_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h3;
        we = 1'h1;
        M_gameFSM_d = RESET_COUNT_gameFSM;
      end
      UPDATE_LUNATIC_COL2_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h1;
        we = 1'h1;
        M_gameFSM_d = RESET_COUNT_gameFSM;
      end
      UPDATE_LUNATIC_COL3_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hf;
        asel = 2'h2;
        we = 1'h1;
        M_gameFSM_d = RESET_COUNT_gameFSM;
      end
      RESET_COUNT_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'he;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = SHL_COL0_gameFSM;
      end
      SHL_COL0_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h0;
        rc = 4'h0;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL1_gameFSM;
      end
      SHL_COL1_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h1;
        rc = 4'h1;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL2_gameFSM;
      end
      SHL_COL2_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h2;
        rc = 4'h2;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = SHL_COL3_gameFSM;
      end
      SHL_COL3_gameFSM: begin
        alufn = 6'h20;
        ra = 4'h3;
        rc = 4'h3;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = MISS_1_gameFSM;
      end
      MISS_1_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h0;
        rb = 4'h1;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_2_gameFSM;
      end
      MISS_2_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h2;
        rb = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_3_gameFSM;
      end
      MISS_3_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h3;
        rb = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = MISS_MASK_gameFSM;
      end
      MISS_MASK_gameFSM: begin
        alufn = 6'h18;
        ra = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 4'h5;
        we = 1'h1;
        M_gameFSM_d = CHECK_MISS_gameFSM;
      end
      CHECK_MISS_gameFSM: begin
        alufn = 6'h33;
        ra = 4'h9;
        rc = 4'h9;
        asel = 2'h0;
        bsel = 4'h5;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_MISS_gameFSM;
      end
      BRANCH_CHECK_MISS_gameFSM: begin
        rb = 4'h9;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = CHECK_COUNT_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = BREAK_COMBO_gameFSM;
        end
      end
      BREAK_COMBO_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        combo_inc = 3'h5;
        M_gameFSM_d = CHECK_COUNT_gameFSM;
      end
      CHECK_COUNT_gameFSM: begin
        alufn = 6'h37;
        ra = 4'h7;
        rb = 4'h8;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_COUNT_gameFSM;
      end
      BRANCH_COUNT_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = CLEAR_1_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = STORE_RAND_gameFSM;
        end
      end
      STORE_RAND_gameFSM: begin
        M_rand_store_d = randgen_add;
        M_gameFSM_d = ADD_NOTE_gameFSM;
      end
      ADD_NOTE_gameFSM: begin
        alufn = 6'h00;
        ra = M_rand_store_q;
        rc = M_rand_store_q;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = INC_COUNT_gameFSM;
      end
      CLEAR_1_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h0;
        rb = 4'h1;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = CLEAR_2_gameFSM;
      end
      CLEAR_2_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h2;
        rb = 4'hd;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = CLEAR_3_gameFSM;
      end
      CLEAR_3_gameFSM: begin
        alufn = 6'h1e;
        ra = 4'h3;
        rb = 4'hd;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = MASK_TOP_8_gameFSM;
      end
      MASK_TOP_8_gameFSM: begin
        alufn = 6'h18;
        ra = 4'hd;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'hb;
        we = 1'h1;
        M_gameFSM_d = CHECK_CLEAR_gameFSM;
      end
      CHECK_CLEAR_gameFSM: begin
        alufn = 6'h33;
        ra = 4'hd;
        rb = 4'h4;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CLEAR_gameFSM;
      end
      BRANCH_CLEAR_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = GAME_IDLE_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = ENDING_LUNATIC_COUNT_gameFSM;
        end
      end
      ENDING_LUNATIC_COUNT_gameFSM: begin
        M_lunatic_d = 1'h0;
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'he;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = DISPLAY_SCORE_gameFSM;
      end
      DISPLAY_SCORE_gameFSM: begin
        if (gameplay_button[0+0-:1]) begin
          M_gameFSM_d = GAME_OVER_gameFSM;
        end else begin
          M_gameFSM_d = DISPLAY_SCORE_gameFSM;
        end
      end
      RESET_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h0;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RESET_COL1_gameFSM;
      end
      RESET_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h1;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RESET_COL2_gameFSM;
      end
      RESET_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h2;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RESET_COL3_gameFSM;
      end
      RESET_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h3;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RESET_LUNATIC_COUNT_gameFSM;
      end
      RESET_LUNATIC_COUNT_gameFSM: begin
        M_lunatic_d = 1'h0;
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'he;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_OVER_gameFSM;
      end
      GAME_OVER_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        M_difficulty_d = 1'h0;
        combo_inc = 3'h5;
        score_inc = 3'h5;
        M_gameFSM_d = GAME_START_gameFSM;
      end
      PUSH_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h0;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL0_gameFSM;
      end
      PUSH_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h1;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL1_gameFSM;
      end
      PUSH_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h2;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL2_gameFSM;
      end
      PUSH_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h3;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = STORE_COL3_gameFSM;
      end
      STORE_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'hb;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL1_gameFSM: begin
        ra = 4'h4;
        rc = 4'hb;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL2_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hb;
        asel = 2'h1;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      STORE_COL3_gameFSM: begin
        alufn = 6'h1a;
        rc = 4'hb;
        asel = 2'h2;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_INPUT_gameFSM;
      end
      BRANCH_CHECK_INPUT_gameFSM: begin
        rb = 4'ha;
        if (rb_fromreg[6+0-:1] == 1'h1) begin
          M_gameFSM_d = COMBO_PERFECT_gameFSM;
        end else begin
          if (rb_fromreg[5+0-:1] == 1'h1) begin
            M_gameFSM_d = COMBO_GOOD_gameFSM;
          end else begin
            if (rb_fromreg[4+0-:1] == 1'h1) begin
              M_gameFSM_d = COMBO_MISS_gameFSM;
            end else begin
              M_gameFSM_d = GAME_IDLE_gameFSM;
            end
          end
        end
      end
      COMBO_PERFECT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h5;
        rc = 4'h5;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        combo_inc = 1'h1;
        M_gameFSM_d = BRANCH_SCORE_PERFECT_gameFSM;
      end
      BRANCH_SCORE_PERFECT_gameFSM: begin
        rb = 4'h5;
        if (rb_fromreg <= 5'h14) begin
          M_gameFSM_d = MULTIPLIER_1_PERFECT_gameFSM;
        end else begin
          if (rb_fromreg <= 6'h28) begin
            M_gameFSM_d = MULTIPLIER_2_PERFECT_gameFSM;
          end else begin
            M_gameFSM_d = MULTIPLIER_4_PERFECT_gameFSM;
          end
        end
      end
      MULTIPLIER_1_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_PERFECT_gameFSM;
      end
      MULTIPLIER_2_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 4'h6;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_PERFECT_gameFSM;
      end
      MULTIPLIER_4_PERFECT_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h2;
        bsel = 4'h7;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_PERFECT_gameFSM;
      end
      BRANCH_LUNATIC_PERFECT_gameFSM: begin
        if (M_lunatic_q == 1'h1) begin
          M_gameFSM_d = CHECK_LUNATIC_ROW_PERFECT_gameFSM;
        end else begin
          M_gameFSM_d = ADD_PERFECT_gameFSM;
        end
      end
      CHECK_LUNATIC_ROW_PERFECT_gameFSM: begin
        alufn = 6'h33;
        ra = 4'hb;
        rb = 4'hf;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_LUNATIC_ROW_PERFECT_gameFSM;
      end
      BRANCH_CHECK_LUNATIC_ROW_PERFECT_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 1'h0) begin
          M_gameFSM_d = ADD_PERFECT_gameFSM;
        end else begin
          if (rb_fromreg == 1'h1) begin
            M_gameFSM_d = MULITPLIER_LUNATIC_PERFECT_gameFSM;
          end
        end
      end
      MULITPLIER_LUNATIC_PERFECT_gameFSM: begin
        alufn = 6'h02;
        ra = 4'hc;
        rc = 4'hc;
        asel = 2'h0;
        bsel = 4'h6;
        we = 1'h1;
        M_gameFSM_d = ADD_PERFECT_gameFSM;
      end
      ADD_PERFECT_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h6;
        rb = 4'hc;
        rc = 4'h6;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = RECORD_PERFECT_gameFSM;
      end
      RECORD_PERFECT_gameFSM: begin
        rb = 4'hc;
        score_inc = rb_fromreg;
        M_gameFSM_d = CLEAR_PERFECT_gameFSM;
      end
      CLEAR_PERFECT_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 4'h1;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      COMBO_GOOD_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h5;
        rc = 4'h5;
        asel = 2'h0;
        bsel = 4'h4;
        we = 1'h1;
        combo_inc = 1'h1;
        M_gameFSM_d = BRANCH_SCORE_GOOD_gameFSM;
      end
      BRANCH_SCORE_GOOD_gameFSM: begin
        rb = 4'h5;
        if (rb_fromreg <= 5'h14) begin
          M_gameFSM_d = MULTIPLIER_1_GOOD_gameFSM;
        end else begin
          if (rb_fromreg <= 6'h28) begin
            M_gameFSM_d = MULTIPLIER_2_GOOD_gameFSM;
          end else begin
            M_gameFSM_d = MULTIPLIER_4_GOOD_gameFSM;
          end
        end
      end
      MULTIPLIER_1_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 4'h4;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_GOOD_gameFSM;
      end
      MULTIPLIER_2_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 4'h6;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_GOOD_gameFSM;
      end
      MULTIPLIER_4_GOOD_gameFSM: begin
        alufn = 6'h02;
        rc = 4'hc;
        asel = 2'h1;
        bsel = 4'h7;
        we = 1'h1;
        M_gameFSM_d = BRANCH_LUNATIC_GOOD_gameFSM;
      end
      BRANCH_LUNATIC_GOOD_gameFSM: begin
        if (M_lunatic_q == 1'h1) begin
          M_gameFSM_d = CHECK_LUNATIC_ROW_GOOD_gameFSM;
        end else begin
          M_gameFSM_d = ADD_GOOD_gameFSM;
        end
      end
      CHECK_LUNATIC_ROW_GOOD_gameFSM: begin
        alufn = 6'h33;
        ra = 4'hb;
        rb = 4'hf;
        rc = 4'hd;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = BRANCH_CHECK_LUNATIC_ROW_GOOD_gameFSM;
      end
      BRANCH_CHECK_LUNATIC_ROW_GOOD_gameFSM: begin
        rb = 4'hd;
        if (rb_fromreg == 1'h0) begin
          M_gameFSM_d = ADD_GOOD_gameFSM;
        end else begin
          if (rb_fromreg == 1'h1) begin
            M_gameFSM_d = MULITPLIER_LUNATIC_GOOD_gameFSM;
          end
        end
      end
      MULITPLIER_LUNATIC_GOOD_gameFSM: begin
        alufn = 6'h02;
        ra = 4'hc;
        rc = 4'hc;
        asel = 2'h0;
        bsel = 4'h6;
        we = 1'h1;
        M_gameFSM_d = ADD_GOOD_gameFSM;
      end
      ADD_GOOD_gameFSM: begin
        alufn = 6'h00;
        ra = 4'h6;
        rb = 4'hc;
        rc = 4'h6;
        asel = 2'h0;
        bsel = 4'h0;
        we = 1'h1;
        M_gameFSM_d = RECORD_GOOD_gameFSM;
      end
      RECORD_GOOD_gameFSM: begin
        rb = 4'hc;
        score_inc = rb_fromreg;
        M_gameFSM_d = CLEAR_GOOD_gameFSM;
      end
      CLEAR_GOOD_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 4'h2;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      COMBO_MISS_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h4;
        rc = 4'h5;
        asel = 2'h0;
        we = 1'h1;
        combo_inc = 3'h5;
        M_gameFSM_d = CLEAR_MISS_gameFSM;
      end
      CLEAR_MISS_gameFSM: begin
        alufn = 6'h18;
        ra = 4'ha;
        rc = 4'ha;
        asel = 2'h0;
        bsel = 4'h3;
        we = 1'h1;
        M_gameFSM_d = BRANCH_UPDATE_COLUMN_gameFSM;
      end
      BRANCH_UPDATE_COLUMN_gameFSM: begin
        rb = 4'hb;
        if (rb_fromreg == 16'h0000) begin
          M_gameFSM_d = UPDATE_COL0_gameFSM;
        end
        if (rb_fromreg == 16'h0001) begin
          M_gameFSM_d = UPDATE_COL1_gameFSM;
        end
        if (rb_fromreg == 16'h0002) begin
          M_gameFSM_d = UPDATE_COL2_gameFSM;
        end
        if (rb_fromreg == 16'h0003) begin
          M_gameFSM_d = UPDATE_COL3_gameFSM;
        end
      end
      UPDATE_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h0;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h1;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h2;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      UPDATE_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h3;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      LEFT_SHIFTER_CHECK_LUNATIC_gameFSM: begin
        if (M_lunatic_q == 1'h1) begin
          M_gameFSM_d = TEMP_STORE_COL0_gameFSM;
        end else begin
          M_gameFSM_d = GAME_IDLE_gameFSM;
        end
      end
      TEMP_STORE_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h0;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = LEFT_COL0_gameFSM;
      end
      LEFT_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h1;
        rc = 4'h0;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = LEFT_COL1_gameFSM;
      end
      LEFT_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h2;
        rc = 4'h1;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = LEFT_COL2_gameFSM;
      end
      LEFT_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h3;
        rc = 4'h2;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = LEFT_COL3_gameFSM;
      end
      LEFT_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h3;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
      RIGHT_SHIFTER_CHECK_LUNATIC_gameFSM: begin
        if (M_lunatic_q == 1'h1) begin
          M_gameFSM_d = TEMP_STORE_COL3_gameFSM;
        end else begin
          M_gameFSM_d = GAME_IDLE_gameFSM;
        end
      end
      TEMP_STORE_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h3;
        rc = 4'ha;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RIGHT_COL3_gameFSM;
      end
      RIGHT_COL3_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h2;
        rc = 4'h3;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RIGHT_COL2_gameFSM;
      end
      RIGHT_COL2_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h1;
        rc = 4'h2;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RIGHT_COL1_gameFSM;
      end
      RIGHT_COL1_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'h0;
        rc = 4'h1;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = RIGHT_COL0_gameFSM;
      end
      RIGHT_COL0_gameFSM: begin
        alufn = 6'h1a;
        ra = 4'ha;
        rc = 4'h0;
        asel = 2'h0;
        we = 1'h1;
        M_gameFSM_d = GAME_IDLE_gameFSM;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_difficulty_q <= 1'h0;
      M_rand_store_q <= 1'h0;
      M_lunatic_q <= 1'h0;
      M_rand_store_lunatic_q <= 1'h0;
      M_gameFSM_q <= 1'h0;
    end else begin
      M_difficulty_q <= M_difficulty_d;
      M_rand_store_q <= M_rand_store_d;
      M_lunatic_q <= M_lunatic_d;
      M_rand_store_lunatic_q <= M_rand_store_lunatic_d;
      M_gameFSM_q <= M_gameFSM_d;
    end
  end
  
endmodule
