/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module decimal_counter_11 (
    input clk,
    input rst,
    input [4:0] inc,
    output reg [4:0] ovf,
    output reg [3:0] value
  );
  
  
  
  reg [3:0] M_val_d, M_val_q = 1'h0;
  
  always @* begin
    M_val_d = M_val_q;
    
    value = M_val_q;
    ovf = (M_val_q == 4'h9 && inc == 1'h1) || (M_val_q >= 4'h8 && inc == 2'h2) || (M_val_q >= 3'h7 && inc == 2'h3) || (M_val_q >= 3'h6 && inc == 3'h4) || (M_val_q >= 3'h4 && inc == 3'h6) || (M_val_q >= 2'h2 && inc == 4'h8);
    if (inc == 1'h1) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 1'h0;
      end else begin
        M_val_d = M_val_q + 1'h1;
      end
    end
    if (inc == 2'h2) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 1'h1;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 1'h0;
        end else begin
          M_val_d = M_val_q + 2'h2;
        end
      end
    end
    if (inc == 2'h3) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 2'h2;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 1'h1;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 1'h0;
          end else begin
            M_val_d = M_val_q + 2'h3;
          end
        end
      end
    end
    if (inc == 3'h4) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 2'h3;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 2'h2;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 1'h1;
          end else begin
            if (M_val_q == 3'h6) begin
              M_val_d = 1'h0;
            end else begin
              M_val_d = M_val_q + 3'h4;
            end
          end
        end
      end
    end
    if (inc == 3'h6) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 3'h5;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 3'h4;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 2'h3;
          end else begin
            if (M_val_q == 3'h6) begin
              M_val_d = 2'h2;
            end else begin
              if (M_val_q == 3'h5) begin
                M_val_d = 1'h1;
              end else begin
                if (M_val_q == 3'h4) begin
                  M_val_d = 1'h0;
                end else begin
                  M_val_d = M_val_q + 3'h6;
                end
              end
            end
          end
        end
      end
    end
    if (inc == 4'h8) begin
      if (M_val_q == 4'h9) begin
        M_val_d = 3'h7;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 3'h6;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 3'h5;
          end else begin
            if (M_val_q == 3'h6) begin
              M_val_d = 3'h4;
            end else begin
              if (M_val_q == 3'h5) begin
                M_val_d = 2'h3;
              end else begin
                if (M_val_q == 3'h4) begin
                  M_val_d = 2'h2;
                end else begin
                  if (M_val_q == 2'h3) begin
                    M_val_d = 1'h1;
                  end else begin
                    if (M_val_q == 2'h2) begin
                      M_val_d = 1'h0;
                    end else begin
                      M_val_d = M_val_q + 4'h8;
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if (inc == 4'hc) begin
      ovf = 1'h1 + (M_val_q >= 4'h8);
      if (M_val_q == 4'h9) begin
        M_val_d = 1'h1;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 1'h0;
        end else begin
          M_val_d = M_val_q + 2'h2;
        end
      end
    end
    if (inc == 5'h10) begin
      ovf = 1'h1 + (M_val_q >= 3'h4);
      if (M_val_q == 4'h9) begin
        M_val_d = 3'h5;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 3'h4;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 2'h3;
          end else begin
            if (M_val_q == 3'h6) begin
              M_val_d = 2'h2;
            end else begin
              if (M_val_q == 3'h5) begin
                M_val_d = 1'h1;
              end else begin
                if (M_val_q == 3'h4) begin
                  M_val_d = 1'h0;
                end else begin
                  M_val_d = M_val_q + 3'h6;
                end
              end
            end
          end
        end
      end
    end
    if (inc == 5'h18) begin
      ovf = 2'h2 + (M_val_q >= 3'h6);
      if (M_val_q == 4'h9) begin
        M_val_d = 2'h3;
      end else begin
        if (M_val_q == 4'h8) begin
          M_val_d = 2'h2;
        end else begin
          if (M_val_q == 3'h7) begin
            M_val_d = 1'h1;
          end else begin
            if (M_val_q == 3'h6) begin
              M_val_d = 1'h0;
            end else begin
              M_val_d = M_val_q + 3'h4;
            end
          end
        end
      end
    end
    if (inc == 3'h5) begin
      ovf = 3'h5;
      M_val_d = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_val_q <= 1'h0;
    end else begin
      M_val_q <= M_val_d;
    end
  end
  
endmodule
