module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    
    input start_lunatic_button,
    input rst_button,
    input gameplay_button[4], // 4 buttons for gameplay 
    input shifter_button[2], // 2 buttons for shifting columns 
    
    output lane_1_LED[7], // 4 lanes of LEDs showing cascading notes 
    output lane_2_LED[7],
    output lane_3_LED[7],
    output lane_4_LED[7],
    
    output lunatic_LED[4],
    
    output combo_seg[7], // 7 segment for the combo count
    output combo_sel[4], // selection of 7 segment for combo
    
    output score_seg[7], // 7 segment for the score
    output score_sel[4]  // selection of 7 segment for score
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner start_lunatic_buttoncond;
    edge_detector start_lunatic_buttondetector(#RISE(1), #FALL(0));
    button_conditioner rst_buttoncond;
    edge_detector rst_buttondetector(#RISE(1), #FALL(0));
    button_conditioner gameplay_buttoncond[4];
    edge_detector gameplay_buttondetector[4](#RISE(1), #FALL(0));
    button_conditioner shifter_buttoncond[2];
    edge_detector shifter_buttondetector[2](#RISE(1), #FALL(0));
    
    .rst(rst){
      multi_seven_seg seg_combo;
      multi_seven_seg seg_score;
      
      multi_dec_ctr combo_dec_ctr;
      multi_dec_ctr score_dec_ctr;
      
      betacpu game_beta;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    start_lunatic_buttoncond.in = start_lunatic_button;
    start_lunatic_buttondetector.in = start_lunatic_buttoncond.out;
    rst_buttoncond.in = rst_button;
    rst_buttondetector.in = rst_buttoncond.out;
    gameplay_buttoncond.in = gameplay_button;
    gameplay_buttondetector.in = gameplay_buttoncond.out;
    shifter_buttoncond.in = shifter_button;
    shifter_buttondetector.in = shifter_buttoncond.out;
    
    game_beta.start_lunatic_button = start_lunatic_buttondetector.out;
    game_beta.rst_button = rst_buttondetector.out;
    game_beta.gameplay_button = gameplay_buttondetector.out;
    game_beta.shifter_button = shifter_buttondetector.out;
    
    lane_1_LED = game_beta.column_1[6:0];
    lane_2_LED = game_beta.column_2[6:0];
    lane_3_LED = game_beta.column_3[6:0];
    lane_4_LED = game_beta.column_4[6:0];
    
    lunatic_LED = game_beta.column_lunatic[3:0];
    
    combo_dec_ctr.inc = game_beta.comboinc;
    score_dec_ctr.inc = game_beta.scoreinc;
    seg_combo.values = combo_dec_ctr.digits;
    seg_score.values = score_dec_ctr.digits;
    
    combo_seg = ~seg_combo.seg;
    combo_sel = ~seg_combo.sel;
    
    score_seg = ~seg_score.seg;
    score_sel = ~seg_score.sel;
  }
}