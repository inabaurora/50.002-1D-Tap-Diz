module adder (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output c[16],
    output z[1],
    output v[1],
    output n[1] 
  ) {

  sig s[16];
  always {
    s = 16b0;
    
    case(alufn_signal[0]){
      0: s = a + b;       // add a and b
      1: s = a - b;       // a subtract b
      default: s = 16b0;
    }
    
    z = ~ | s; // return inverse of 16 bits of s output cascaded through OR gates
    v = (a[15] & (b[15] ^ alufn_signal[0]) & ~ s[15]) | (~ a[15] & ~ (b[15] ^ alufn_signal[0]) & s[15]); // return 1 if overflow has occurred
    n = s[15]; // return most significant bit of output
    c = s ; // return output
  }
}