module controlunit (
    input clk,  // clock
    input rst,  // reset
    
    input start_lunatic_button,
    input rst_button,
    input gameplay_button[4],
    input shifter_button[2],
    
    input rb_fromreg[16],      // retrieves information from register input in rb directly
    input randgen_add[2],      // randomly generate which row to add new note into
    input randgen_lunatic[2],  // randomly generate which row is the bonus points for lunatic
    input slow_clock_in,       // takes the speed of the clock from the betacpu to control the speed of notes added
    
    //signals
    output alufn[6],
    output ra[5],
    output rb[5],
    output rc[5],
    output asel[2],
    output bsel[4],
    output we,
    output wdsel[2],
    
    output set_speed[2],        
    output combo_inc[16],
    output score_inc[16],
    
    output lunatic_check
  ) {
  
  .clk(clk){

    .rst(rst){
      // registers to pass temporary values in CU
      dff difficulty[2];
      dff rand_store[2];
      dff lunatic;
      dff rand_store_lunatic[2];
      
      fsm gameFSM = {
      // difficulty set
      GAME_START,
      WAIT_DIFFICULTY,
      DIFFICULTY_EASY,
      DIFFICULTY_NORMAL,
      DIFFICULTY_HARD,
      DIFFICULTY_INSANE,
      SPECIAL_GAMEMODE,
      GAMEMODE_LUNATIC,
      BRANCH_INITIALIZE_LUNATIC,
      INITIALIZE_LUNATIC_0,
      INITIALIZE_LUNATIC_1,
      INITIALIZE_LUNATIC_2,
      INITIALIZE_LUNATIC_3,
      INC_COUNT,
      GAME_IDLE,
      
      // constant ongoing adjustment of LEDs
      BRANCH_CHECK_LUNATIC,
      ADD_LUNATIC_NOTE,
      BRANCH_CHECK_LUNATIC_DIFFICULTY,
      EASY_LUNATIC_COUNT,
      MEDIUM_LUNATIC_COUNT,
      HARD_LUNATIC_COUNT,
      INSANE_LUNATIC_COUNT,
      BRANCH_RESET_COUNT,
      STORE_RAND_LUNATIC,
      BRANCH_CHANGE_LUNATIC,
      UPDATE_LUNATIC_COL0,
      UPDATE_LUNATIC_COL1,
      UPDATE_LUNATIC_COL2,
      UPDATE_LUNATIC_COL3,
      RESET_COUNT,
      SHL_COL0,
      SHL_COL1,
      SHL_COL2,
      SHL_COL3,
      MISS_1,
      MISS_2,
      MISS_3,
      MISS_MASK,
      CHECK_MISS,
      BRANCH_CHECK_MISS,
      BREAK_COMBO,
      CHECK_COUNT,
      BRANCH_COUNT,
      STORE_RAND,
      ADD_NOTE,
      
      // check if the the max number of notes have been added, if so either clear the remaining notes added previously
      CLEAR_1,
      CLEAR_2,
      CLEAR_3,
      MASK_TOP_8,
      CHECK_CLEAR,
      BRANCH_CLEAR,
      // if all notes cleared, update and show highscore
      BRANCH_SET_HIGHSCORE,
      CHECK_SET_HIGHSCORE_NORMAL,
      BRANCH_HIGHSCORE_NORMAL,
      SET_HIGHSCORE_NORMAL,
      CHECK_SET_HIGHSCORE_LUNATIC,
      BRANCH_HIGHSCORE_LUNATIC,
      SET_HIGHSCORE_LUNATIC,
      ENDING_LUNATIC_COUNT,
      DISPLAY_SCORE_NORMAL,
      RESET_SCORE_SEL_NORMAL,
      CHECK_MAX_SCORE_NORMAL,
      BRANCH_MAX_SCORE_NORMAL,
      ADD_MAX_SCORE_NORMAL,
      DISPLAY_SCORE_LUNATIC,
      RESET_SCORE_SEL_LUNATIC,
      CHECK_MAX_SCORE_LUNATIC,
      BRANCH_MAX_SCORE_LUNATIC,
      ADD_MAX_SCORE_LUNATIC,
      RESET_TEMP_SCORE,
      END_GAME,
      // if reset button pressed, clear all the lanes of lights
      RESET_COL0,
      RESET_COL1,
      RESET_COL2,
      RESET_COL3,
      RESET_LUNATIC_COUNT,
      // reset all necessary registers to 0 for a fresh new game
      RESET_COMBO,
      RESET_SCORE,
      GAME_OVER,
        
      // gameplay segment, button pressed
      PUSH_COL0,
      PUSH_COL1,
      PUSH_COL2,
      PUSH_COL3,
      STORE_COL0,
      STORE_COL1,
      STORE_COL2,
      STORE_COL3,
      // score calculation
      BRANCH_CHECK_INPUT,
      COMBO_PERFECT,
      BRANCH_SCORE_PERFECT,
      MULTIPLIER_1_PERFECT,
      MULTIPLIER_2_PERFECT,
      MULTIPLIER_4_PERFECT,
      BRANCH_LUNATIC_PERFECT,
      CHECK_LUNATIC_ROW_PERFECT,
      BRANCH_CHECK_LUNATIC_ROW_PERFECT,
      MULITPLIER_LUNATIC_PERFECT,
      ADD_PERFECT,
      RECORD_PERFECT,
      CLEAR_PERFECT,
      COMBO_GOOD,
      BRANCH_SCORE_GOOD,
      MULTIPLIER_1_GOOD,
      MULTIPLIER_2_GOOD,
      MULTIPLIER_4_GOOD,
      BRANCH_LUNATIC_GOOD,
      CHECK_LUNATIC_ROW_GOOD,
      BRANCH_CHECK_LUNATIC_ROW_GOOD,
      MULITPLIER_LUNATIC_GOOD,
      ADD_GOOD,
      RECORD_GOOD,
      CLEAR_GOOD,
      COMBO_MISS,
      CLEAR_MISS,
      // remove the light of the lane corresponding to the input button
      BRANCH_UPDATE_COLUMN,
      UPDATE_COL0,
      UPDATE_COL1,
      UPDATE_COL2,
      UPDATE_COL3,
        
      //column shifting segment (lunatic)
      LEFT_SHIFTER_CHECK_LUNATIC,
      TEMP_STORE_COL0,
      LEFT_COL0,
      LEFT_COL1,
      LEFT_COL2,
      LEFT_COL3,
      RIGHT_SHIFTER_CHECK_LUNATIC,
      TEMP_STORE_COL3,
      RIGHT_COL3,
      RIGHT_COL2,
      RIGHT_COL1,
      RIGHT_COL0
      };
    }
  } 
  // all ALUFN inputs used 
  const ADD = 6b000000;
  const MUL = 6b000010;
  const AND = 6b011000;
  const OR = 6b011110;
  const ALDR = 6b011010;
  const SHL = 6b100000;
  const CMPLT = 6b110101;
  const CMPEQ = 6b110011;
  const CMPLE = 6b110111;
  
  // all unused ALUFN inputs
  // const SUB = 6b000001;
  // const XOR = 6b010110;
  // const SHR = 6b100001;
  // const SRA = 6b100011;
  
  always {
    alufn = 0;
    ra = 0;
    rb = 0;
    rc = 0;
    asel = 0;
    bsel = 0;
    we = 0;
    wdsel = 0;
    
    set_speed = difficulty.q;  // send difficulty to the betacpu to determine the speed of the clock
    combo_inc = 0;             // send the increase in combo to the 7 segment
    score_inc = 0;             // send the increase in score to the 7 segment
    
    lunatic_check = lunatic.q; // checks if lunatic difficulty is enabled and sends it to the betacpu to enable the lunatic lights
    
    case (gameFSM.q){
      gameFSM.GAME_START:
        if (start_lunatic_button) {
          gameFSM.d = gameFSM.WAIT_DIFFICULTY;
        }
        else {
          gameFSM.d = gameFSM.GAME_START;
        }
      
      gameFSM.WAIT_DIFFICULTY:
        if (gameplay_button[0]) {
          gameFSM.d = gameFSM.DIFFICULTY_EASY;
        }
        else if (gameplay_button[1]) {
          gameFSM.d = gameFSM.DIFFICULTY_NORMAL;
        }
        else if (gameplay_button[2]) {
          gameFSM.d = gameFSM.DIFFICULTY_HARD;
        }
        else if (gameplay_button[3]) {
          gameFSM.d = gameFSM.DIFFICULTY_INSANE;
        }
        else if (rst_button) {
          gameFSM.d = gameFSM.RESET_COMBO;
        }
        else {
          gameFSM.d = gameFSM.WAIT_DIFFICULTY;
        }
      
      gameFSM.DIFFICULTY_EASY:
        difficulty.d = 0;
        
        rc = 5h8;
        we = 1;
        wdsel = 2b01;
        
        gameFSM.d = gameFSM.SPECIAL_GAMEMODE;
      
      gameFSM.DIFFICULTY_NORMAL:
        difficulty.d = 1;
        
        rc = 5h8;
        we = 1;
        wdsel = 2b10;
        
        gameFSM.d = gameFSM.SPECIAL_GAMEMODE;
        
      gameFSM.DIFFICULTY_HARD:
        difficulty.d = 2;
        
        rc = 5h8;
        we = 1;
        wdsel = 2b11;
        
        gameFSM.d = gameFSM.SPECIAL_GAMEMODE;
      
      gameFSM.DIFFICULTY_INSANE:
        difficulty.d = 3;
        
        rc = 5h8;
        we = 1;
        wdsel = 2b11;
        
        gameFSM.d = gameFSM.SPECIAL_GAMEMODE;
          
      gameFSM.SPECIAL_GAMEMODE:
        if (start_lunatic_button) {
          gameFSM.d = gameFSM.GAMEMODE_LUNATIC;
        }
        else if ((gameplay_button[0]) || (gameplay_button[1]) || (gameplay_button[2]) || (gameplay_button[3])){
          gameFSM.d = gameFSM.INC_COUNT;
        }
        else if (rst_button) {
          gameFSM.d = gameFSM.RESET_COMBO;
        }  
        else {
          gameFSM.d = gameFSM.SPECIAL_GAMEMODE;
        }
        
      gameFSM.GAMEMODE_LUNATIC:
        lunatic.d = 1;
        rand_store_lunatic.d = randgen_lunatic;
        
        gameFSM.d = gameFSM.BRANCH_INITIALIZE_LUNATIC;
        
      gameFSM.BRANCH_INITIALIZE_LUNATIC:
        if (rand_store_lunatic.q == 2b00) {
          gameFSM.d = gameFSM.INITIALIZE_LUNATIC_0;
        }
        else if (rand_store_lunatic.q == 2b01) {
          gameFSM.d = gameFSM.INITIALIZE_LUNATIC_1;
        }
        else if (rand_store_lunatic.q == 2b10) {
          gameFSM.d = gameFSM.INITIALIZE_LUNATIC_2;
        }
        else if (rand_store_lunatic.q == 2b11) {
          gameFSM.d = gameFSM.INITIALIZE_LUNATIC_3;
        }
        
      gameFSM.INITIALIZE_LUNATIC_0:
        alufn = ALDR;
        ra = 5h4;
        rc = 5hf;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.INC_COUNT;
        
      gameFSM.INITIALIZE_LUNATIC_1:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b11;
        we = 1;
        
        gameFSM.d = gameFSM.INC_COUNT;
        
      gameFSM.INITIALIZE_LUNATIC_2:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b01;
        we = 1;
        
        gameFSM.d = gameFSM.INC_COUNT;
        
      gameFSM.INITIALIZE_LUNATIC_3:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b10;
        we = 1;
        
        gameFSM.d = gameFSM.INC_COUNT;
        
      gameFSM.INC_COUNT:
        alufn = ADD;
        ra = 5h7;
        rc = 5h7;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
        
      gameFSM.GAME_IDLE:
        if (gameplay_button[0]) {
          gameFSM.d = gameFSM.PUSH_COL0;
        }
        if (gameplay_button[1]) {
          gameFSM.d = gameFSM.PUSH_COL1;
        }
        if (gameplay_button[2]) {
          gameFSM.d = gameFSM.PUSH_COL2;
        }
        if (gameplay_button[3]) {
          gameFSM.d = gameFSM.PUSH_COL3;
        }
        
        if (shifter_button[0]) {
          gameFSM.d = gameFSM.LEFT_SHIFTER_CHECK_LUNATIC;
        }
        if (shifter_button[1]) {
          gameFSM.d = gameFSM.RIGHT_SHIFTER_CHECK_LUNATIC;
        }
        
        if (rst_button) {
          gameFSM.d = gameFSM.RESET_COL0;
        }
        
        if (slow_clock_in == b1) {
          gameFSM.d = gameFSM.BRANCH_CHECK_LUNATIC;
        }
        
      // perpetual component of the FSM
      gameFSM.BRANCH_CHECK_LUNATIC:
        if (lunatic.q == 1) {
          gameFSM.d = gameFSM.ADD_LUNATIC_NOTE;
        }
        else {
          gameFSM.d = gameFSM.SHL_COL0;
        }
        
      gameFSM.ADD_LUNATIC_NOTE:
        alufn = ADD;
        ra = 5he;
        rc = 5he;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_LUNATIC_DIFFICULTY;
      
      gameFSM.BRANCH_CHECK_LUNATIC_DIFFICULTY:
        if (difficulty.q == 0) {
          gameFSM.d = gameFSM.EASY_LUNATIC_COUNT;
        }
        else if (difficulty.q == 1) {
          gameFSM.d = gameFSM.MEDIUM_LUNATIC_COUNT;
        }
        else if (difficulty.q == 2) {
          gameFSM.d = gameFSM.HARD_LUNATIC_COUNT;
        }
        else if (difficulty.q == 3) {
          gameFSM.d = gameFSM.INSANE_LUNATIC_COUNT;
        }
        
      gameFSM.EASY_LUNATIC_COUNT:
        alufn = CMPEQ;
        ra = 5he;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b1000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_RESET_COUNT;
        
      gameFSM.MEDIUM_LUNATIC_COUNT:
        alufn = CMPEQ;
        ra = 5he;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b1001;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_RESET_COUNT;
         
      gameFSM.HARD_LUNATIC_COUNT:
        alufn = CMPEQ;
        ra = 5he;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b1010;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_RESET_COUNT;
        
      gameFSM.INSANE_LUNATIC_COUNT:
        alufn = CMPEQ;
        ra = 5he;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b1010;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_RESET_COUNT;
        
      gameFSM.BRANCH_RESET_COUNT:
        rb = 5hd;
        
        if (rb_fromreg == 16h0) {
          gameFSM.d = gameFSM.SHL_COL0;
        }
        else if (rb_fromreg == 16h1) {
          gameFSM.d = gameFSM.STORE_RAND_LUNATIC;
        }
      
      gameFSM.STORE_RAND_LUNATIC:
        rand_store_lunatic.d = randgen_lunatic;
        
        gameFSM.d = gameFSM.BRANCH_CHANGE_LUNATIC;
        
      gameFSM.BRANCH_CHANGE_LUNATIC:
        if (rand_store_lunatic.q == 2b00) {
          gameFSM.d = gameFSM.UPDATE_LUNATIC_COL0;
        }
        else if (rand_store_lunatic.q == 2b01) {
          gameFSM.d = gameFSM.UPDATE_LUNATIC_COL1;
        }
        else if (rand_store_lunatic.q == 2b10) {
          gameFSM.d = gameFSM.UPDATE_LUNATIC_COL2;
        }
        else if (rand_store_lunatic.q == 2b11) {
          gameFSM.d = gameFSM.UPDATE_LUNATIC_COL3;
        }
        
      gameFSM.UPDATE_LUNATIC_COL0:
        alufn = ALDR;
        ra = 5h4;
        rc = 5hf;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COUNT;
        
      gameFSM.UPDATE_LUNATIC_COL1:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b11;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COUNT;
        
      gameFSM.UPDATE_LUNATIC_COL2:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b01;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COUNT;
        
      gameFSM.UPDATE_LUNATIC_COL3:
        alufn = ALDR;
        rc = 5hf;
        asel = 2b10;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COUNT;
        
      gameFSM.RESET_COUNT:
        alufn = ALDR;
        ra = 5h4;
        rc = 5he;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.SHL_COL0;
        
      gameFSM.SHL_COL0:
        alufn = SHL;
        ra = 5h0;
        rc = 5h0;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.SHL_COL1;
        
      gameFSM.SHL_COL1:
        alufn = SHL;
        ra = 5h1;
        rc = 5h1;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.SHL_COL2;
        
      gameFSM.SHL_COL2:
        alufn = SHL;
        ra = 5h2;
        rc = 5h2;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.SHL_COL3;
        
      gameFSM.SHL_COL3:
        alufn = SHL;
        ra = 5h3;
        rc = 5h3;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.MISS_1;
        
      gameFSM.MISS_1:
        alufn = OR;
        ra = 5h0;
        rb = 5h1;
        rc = 5h9;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.MISS_2;
        
      gameFSM.MISS_2:
        alufn = OR;
        ra = 5h2;
        rb = 5h9;
        rc = 5h9;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.MISS_3;
        
      gameFSM.MISS_3:
        alufn = OR;
        ra = 5h3;
        rb = 5h9;
        rc = 5h9;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.MISS_MASK;
        
      gameFSM.MISS_MASK:
        alufn = AND;
        ra = 5h9;
        rc = 5h9;
        asel = 2b00;
        bsel = 4b0101;
        we = 1;
        
        gameFSM.d = gameFSM.CHECK_MISS;
        
      gameFSM.CHECK_MISS:
        alufn = CMPEQ;
        ra = 5h9;
        rc = 5h9;
        asel = 2b00;
        bsel = 4b0101;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_MISS;
        
      gameFSM.BRANCH_CHECK_MISS:
        rb = 5h9;
        
        if (rb_fromreg == 16h0) {
          gameFSM.d = gameFSM.CHECK_COUNT;
        }
        if (rb_fromreg == 16h1) {
          gameFSM.d = gameFSM.BREAK_COMBO;
        }
        
      gameFSM.BREAK_COMBO:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h5;
        asel = 2b00;
        we = 1;
        
        combo_inc = 5;
        
        gameFSM.d = gameFSM.CHECK_COUNT;
        
      gameFSM.CHECK_COUNT:
        alufn = CMPLE;
        ra = 5h7;
        rb = 5h8;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_COUNT;
        
      gameFSM.BRANCH_COUNT:
        rb = 5hd;
        
        if (rb_fromreg == 16h0) {
          gameFSM.d = gameFSM.CLEAR_1;
        }
        
        if (rb_fromreg == 16h1) {
          gameFSM.d = gameFSM.STORE_RAND;
        }
      
      gameFSM.STORE_RAND:
        rand_store.d = randgen_add;
        
        gameFSM.d = gameFSM.ADD_NOTE;  
          
      gameFSM.ADD_NOTE:
        alufn = ADD;
        ra = rand_store.q;
        rc = rand_store.q;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.INC_COUNT;
        
      gameFSM.CLEAR_1:
        alufn = OR;
        ra = 5h0;
        rb = 5h1;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.CLEAR_2;
        
      gameFSM.CLEAR_2:
        alufn = OR;
        ra = 5h2;
        rb = 5hd;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.CLEAR_3;
        
      gameFSM.CLEAR_3:
        alufn = OR;
        ra = 5h3;
        rb = 5hd;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.MASK_TOP_8;
      
      gameFSM.MASK_TOP_8:
        alufn = AND;
        ra = 5hd;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b1011;
        we = 1;
        
        gameFSM.d = gameFSM.CHECK_CLEAR;
          
      gameFSM.CHECK_CLEAR:
        alufn = CMPEQ;
        ra = 5hd;
        rb = 5h4;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CLEAR;
        
      gameFSM.BRANCH_CLEAR:
        rb = 5hd;
        
        if (rb_fromreg == 16h0) {
          gameFSM.d = gameFSM.GAME_IDLE;
        }
        
        if (rb_fromreg == 16h1) {
          gameFSM.d = gameFSM.BRANCH_SET_HIGHSCORE;
        }
        
      gameFSM.BRANCH_SET_HIGHSCORE:
        if (lunatic.q == 0) {
          gameFSM.d = gameFSM.CHECK_SET_HIGHSCORE_NORMAL;
        }
        else if (lunatic.q == 1) {
          gameFSM.d = gameFSM.CHECK_SET_HIGHSCORE_LUNATIC;
        }
        
      gameFSM.CHECK_SET_HIGHSCORE_NORMAL:
        alufn = CMPLT;
        ra = 5h6;
        rb = 5h10;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_HIGHSCORE_NORMAL;
      
      gameFSM.BRANCH_HIGHSCORE_NORMAL:
        rb = 5hd;
        
        if (rb_fromreg == 16b1) {
          gameFSM.d = gameFSM.DISPLAY_SCORE_NORMAL;
        }
        else if (rb_fromreg == 16b0) {
          gameFSM.d = gameFSM.SET_HIGHSCORE_NORMAL;
        }
        
      gameFSM.SET_HIGHSCORE_NORMAL:
        alufn = ALDR;
        ra = 5h6;
        rc = 5h10;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.DISPLAY_SCORE_NORMAL;
        
      gameFSM.CHECK_SET_HIGHSCORE_LUNATIC:
        alufn = CMPLT;
        ra = 5h6;
        rb = 5h11;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_HIGHSCORE_LUNATIC;
        
      gameFSM.BRANCH_HIGHSCORE_LUNATIC:
        rb = 5hd;
        
        if (rb_fromreg == 16b1) {
          gameFSM.d = gameFSM.ENDING_LUNATIC_COUNT;
        }
        else if (rb_fromreg == 16b0) {
          gameFSM.d = gameFSM.SET_HIGHSCORE_LUNATIC;
        }
        
      gameFSM.SET_HIGHSCORE_LUNATIC:
        alufn = ALDR;
        ra = 5h6;
        rc = 5h11;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.ENDING_LUNATIC_COUNT;
        
      gameFSM.ENDING_LUNATIC_COUNT:
        lunatic.d = 0;
        
        alufn = ALDR;
        ra = 5h4;
        rc = 5he;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.DISPLAY_SCORE_LUNATIC;
        
      gameFSM.DISPLAY_SCORE_NORMAL:
        if ((gameplay_button[0]) || (gameplay_button[1]) || (gameplay_button[2]) || (gameplay_button[3])) {
          gameFSM.d = gameFSM.RESET_SCORE_SEL_NORMAL;
        }
        else if (rst_button) {
          gameFSM.d = gameFSM.RESET_COL0;
        }
        else {
          gameFSM.d = gameFSM.DISPLAY_SCORE_NORMAL;
        }
        
      gameFSM.RESET_SCORE_SEL_NORMAL:
        combo_inc = 5;
        score_inc = 5;
        
        gameFSM.d = gameFSM.CHECK_MAX_SCORE_NORMAL;
        
      gameFSM.CHECK_MAX_SCORE_NORMAL:
        alufn = CMPLT;
        ra = 5h12;
        rb = 5h10;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_MAX_SCORE_NORMAL;
        
      gameFSM.BRANCH_MAX_SCORE_NORMAL:
        rb = 5hd;

        if (rb_fromreg == 16b1) {
          gameFSM.d = gameFSM.ADD_MAX_SCORE_NORMAL;
        }
        else if (rb_fromreg == 16b0) {
          gameFSM.d = gameFSM.RESET_TEMP_SCORE;
        }
        
      gameFSM.ADD_MAX_SCORE_NORMAL:
        score_inc = 1;
        
        alufn = ADD;
        ra = 5h12;
        rc = 5h12;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.CHECK_MAX_SCORE_NORMAL;
          
      gameFSM.DISPLAY_SCORE_LUNATIC:
        if ((gameplay_button[0]) || (gameplay_button[1]) || (gameplay_button[2]) || (gameplay_button[3])) {
          gameFSM.d = gameFSM.RESET_SCORE_SEL_LUNATIC;
        }
        else if (rst_button) {
          gameFSM.d = gameFSM.RESET_COL0;
        }
        else {
          gameFSM.d = gameFSM.DISPLAY_SCORE_LUNATIC;
        }
      
      gameFSM.RESET_SCORE_SEL_LUNATIC:
        combo_inc = 5;
        score_inc = 5;
        
        gameFSM.d = gameFSM.CHECK_MAX_SCORE_LUNATIC;
        
      gameFSM.CHECK_MAX_SCORE_LUNATIC:
        alufn = CMPLT;
        ra = 5h12;
        rb = 5h11;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_MAX_SCORE_LUNATIC;
        
      gameFSM.BRANCH_MAX_SCORE_LUNATIC:
        rb = 5hd;

        if (rb_fromreg == 16b1) {
          gameFSM.d = gameFSM.ADD_MAX_SCORE_LUNATIC;
        }
        else if (rb_fromreg == 16b0) {
          gameFSM.d = gameFSM.RESET_TEMP_SCORE;
        }
        
      gameFSM.ADD_MAX_SCORE_LUNATIC:
        score_inc = 1;
        
        alufn = ADD;
        ra = 5h12;
        rc = 5h12;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.CHECK_MAX_SCORE_LUNATIC;
        
      gameFSM.RESET_TEMP_SCORE:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h12;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.END_GAME;
        
      gameFSM.END_GAME:
        if ((gameplay_button[0]) || (gameplay_button[1]) || (gameplay_button[2]) || (gameplay_button[3]) || rst_button) {
          gameFSM.d = gameFSM.RESET_COMBO;
        }
        else {
          gameFSM.d = gameFSM.END_GAME;
        }
        
      gameFSM.RESET_COL0:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h0;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COL1;
      
      gameFSM.RESET_COL1:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h1;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COL2;
        
      gameFSM.RESET_COL2:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h2;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COL3;
        
      gameFSM.RESET_COL3:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h3;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_LUNATIC_COUNT;
      
      gameFSM.RESET_LUNATIC_COUNT:
        lunatic.d = 0;
        
        alufn = ALDR;
        ra = 5h4;
        rc = 5he;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_COMBO;
        
      gameFSM.RESET_COMBO:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h5;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RESET_SCORE;
        
      gameFSM.RESET_SCORE:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h6;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_OVER;
        
      gameFSM.GAME_OVER:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h7;
        asel = 2b00;
        we = 1;
        
        difficulty.d = 0;
        combo_inc = 5;
        score_inc = 5;
        
        gameFSM.d = gameFSM.GAME_START;
        
      // scoring component of the FSM
      gameFSM.PUSH_COL0:
        alufn = ALDR;
        ra = 5h0;
        rc = 5ha;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.STORE_COL0;
        
      gameFSM.PUSH_COL1:
        alufn = ALDR;
        ra = 5h1;
        rc = 5ha;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.STORE_COL1;
        
      gameFSM.PUSH_COL2:
        alufn = ALDR;
        ra = 5h2;
        rc = 5ha;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.STORE_COL2;
        
      gameFSM.PUSH_COL3:
        alufn = ALDR;
        ra = 5h3;
        rc = 5ha;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.STORE_COL3;
        
      gameFSM.STORE_COL0:
        alufn = ALDR;
        ra = 5h4;
        rc = 5hb;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_INPUT;
        
      gameFSM.STORE_COL1:
        ra = 5h4;
        rc = 5hb;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_INPUT;
        
      gameFSM.STORE_COL2:
        alufn = ALDR;
        rc = 5hb;
        asel = 2b01;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_INPUT;
        
      gameFSM.STORE_COL3:
        alufn = ALDR;
        rc = 5hb;
        asel = 2b10;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_INPUT;
        
      gameFSM.BRANCH_CHECK_INPUT:
        rb = 5ha;
        
        if (rb_fromreg[6] == 1) {
          gameFSM.d = gameFSM.COMBO_PERFECT;
        }
        else if (rb_fromreg[5] == 1) {
          gameFSM.d = gameFSM.COMBO_GOOD;
        }
        else if (rb_fromreg[4] == 1) {
          gameFSM.d = gameFSM.COMBO_MISS;
        }
        else {
          gameFSM.d = gameFSM.GAME_IDLE;
        }
        
      gameFSM.COMBO_PERFECT:
        alufn = ADD;
        ra = 5h5;
        rc = 5h5;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        combo_inc = 1;
       
        gameFSM.d = gameFSM.BRANCH_SCORE_PERFECT;
        
      gameFSM.BRANCH_SCORE_PERFECT:
        rb = 5h5;
        
        if (rb_fromreg <= 20){
          gameFSM.d = gameFSM.MULTIPLIER_1_PERFECT;
        }
        else if (rb_fromreg <= 40){
          gameFSM.d = gameFSM.MULTIPLIER_2_PERFECT;
        }
        else {
          gameFSM.d = gameFSM.MULTIPLIER_4_PERFECT;
        }
      
      gameFSM.MULTIPLIER_1_PERFECT:
        alufn = MUL;
        rc = 5hc;
        asel = 2b10;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_PERFECT;
        
      gameFSM.MULTIPLIER_2_PERFECT:
        alufn = MUL;
        rc = 5hc;
        asel = 2b10;
        bsel = 4b0110;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_PERFECT;
        
      gameFSM.MULTIPLIER_4_PERFECT:
        alufn = MUL;
        rc = 5hc;
        asel = 2b10;
        bsel = 4b0111;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_PERFECT;
        
      gameFSM.BRANCH_LUNATIC_PERFECT:
        if (lunatic.q == 1) {
          gameFSM.d = gameFSM.CHECK_LUNATIC_ROW_PERFECT;
        }
        else {
          gameFSM.d = gameFSM.ADD_PERFECT;
        }
        
      gameFSM.CHECK_LUNATIC_ROW_PERFECT:
        alufn = CMPEQ;
        ra = 5hb;
        rb = 5hf;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_LUNATIC_ROW_PERFECT;
        
      gameFSM.BRANCH_CHECK_LUNATIC_ROW_PERFECT:
        rb = 5hd;
        
        if (rb_fromreg == 0) {
          gameFSM.d = gameFSM.ADD_PERFECT;
        }
        else if (rb_fromreg == 1) {
          gameFSM.d = gameFSM.MULITPLIER_LUNATIC_PERFECT;
        }
        
      gameFSM.MULITPLIER_LUNATIC_PERFECT:
        alufn = MUL;
        ra = 5hc;
        rc = 5hc;
        asel = 2b00;
        bsel = 4b0110;
        we = 1;
        
        gameFSM.d = gameFSM.ADD_PERFECT;
        
      gameFSM.ADD_PERFECT:
        alufn = ADD;
        ra = 5h6;
        rb = 5hc;
        rc = 5h6;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.RECORD_PERFECT;
       
      gameFSM.RECORD_PERFECT:
        rb = 5hc;
        
        score_inc = rb_fromreg;
        
        gameFSM.d = gameFSM.CLEAR_PERFECT;
         
      gameFSM.CLEAR_PERFECT:
        alufn = AND;
        ra = 5ha;
        rc = 5ha;
        asel = 2b00;
        bsel = 4b0001;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_UPDATE_COLUMN;
        
      gameFSM.COMBO_GOOD:
        alufn = ADD;
        ra = 5h5;
        rc = 5h5;
        asel = 2b00;
        bsel = 4b0100;
        we = 1;
        
        combo_inc = 1;
        
        gameFSM.d = gameFSM.BRANCH_SCORE_GOOD;
        
      gameFSM.BRANCH_SCORE_GOOD:
        rb = 5h5;
        
        if (rb_fromreg <= 20){
          gameFSM.d = gameFSM.MULTIPLIER_1_GOOD;
        }
        else if (rb_fromreg <= 40){
          gameFSM.d = gameFSM.MULTIPLIER_2_GOOD;
        }
        else {
          gameFSM.d = gameFSM.MULTIPLIER_4_GOOD;
        }
        
      gameFSM.MULTIPLIER_1_GOOD:
        alufn = MUL;
        rc = 5hc;
        asel = 2b01;
        bsel = 4b0100;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_GOOD;
        
      gameFSM.MULTIPLIER_2_GOOD:
        alufn = MUL;
        rc = 5hc;
        asel = 2b01;
        bsel = 4b0110;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_GOOD;
        
      gameFSM.MULTIPLIER_4_GOOD:
        alufn = MUL;
        rc = 5hc;
        asel = 2b01;
        bsel = 4b0111;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_LUNATIC_GOOD;
        
      gameFSM.BRANCH_LUNATIC_GOOD:
        if (lunatic.q == 1) {
          gameFSM.d = gameFSM.CHECK_LUNATIC_ROW_GOOD;
        }
        else {
          gameFSM.d = gameFSM.ADD_GOOD;
        }
        
      gameFSM.CHECK_LUNATIC_ROW_GOOD:
        alufn = CMPEQ;
        ra = 5hb;
        rb = 5hf;
        rc = 5hd;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_CHECK_LUNATIC_ROW_GOOD;
        
      gameFSM.BRANCH_CHECK_LUNATIC_ROW_GOOD:
        rb = 5hd;
        
        if (rb_fromreg == 0) {
          gameFSM.d = gameFSM.ADD_GOOD;
        }
        else if (rb_fromreg == 1) {
          gameFSM.d = gameFSM.MULITPLIER_LUNATIC_GOOD;
        }
        
      gameFSM.MULITPLIER_LUNATIC_GOOD:
        alufn = MUL;
        ra = 5hc;
        rc = 5hc;
        asel = 2b00;
        bsel = 4b0110;
        we = 1;
        
        gameFSM.d = gameFSM.ADD_GOOD;
        
      gameFSM.ADD_GOOD:
        alufn = ADD;
        ra = 5h6;
        rb = 5hc;
        rc = 5h6;
        asel = 2b00;
        bsel = 4b0000;
        we = 1;
        
        gameFSM.d = gameFSM.RECORD_GOOD;
        
      gameFSM.RECORD_GOOD:
        rb = 5hc;
        
        score_inc = rb_fromreg;
        
        gameFSM.d = gameFSM.CLEAR_GOOD;
        
      gameFSM.CLEAR_GOOD:
        alufn = AND;
        ra = 5ha;
        rc = 5ha;
        asel = 2b00;
        bsel = 4b0010;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_UPDATE_COLUMN;
        
      gameFSM.COMBO_MISS:
        alufn = ALDR;
        ra = 5h4;
        rc = 5h5;
        asel = 2b00;
        we = 1;
        
        combo_inc = 5;
        
        gameFSM.d = gameFSM.CLEAR_MISS;
        
      gameFSM.CLEAR_MISS:
        alufn = AND;
        ra = 5ha;
        rc = 5ha;
        asel = 2b00;
        bsel = 4b0011;
        we = 1;
        
        gameFSM.d = gameFSM.BRANCH_UPDATE_COLUMN;
        
      gameFSM.BRANCH_UPDATE_COLUMN:
        rb = 5hb;
        
        if (rb_fromreg == 16h0) {
          gameFSM.d = gameFSM.UPDATE_COL0;
        }
        if (rb_fromreg == 16h1) {
          gameFSM.d = gameFSM.UPDATE_COL1;
        }
        if (rb_fromreg == 16h2) {
          gameFSM.d = gameFSM.UPDATE_COL2;
        }
        if (rb_fromreg == 16h3) {
          gameFSM.d = gameFSM.UPDATE_COL3;
        }
        
      gameFSM.UPDATE_COL0:
        alufn = ALDR;
        ra = 5ha;
        rc = 5h0;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
        
      gameFSM.UPDATE_COL1:
        alufn = ALDR;
        ra = 5ha;
        rc = 5h1;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
        
      gameFSM.UPDATE_COL2:
        alufn = ALDR;
        ra = 5ha;
        rc = 5h2;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
      
      gameFSM.UPDATE_COL3:
        alufn = ALDR;
        ra = 5ha;
        rc = 5h3;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
        
      gameFSM.LEFT_SHIFTER_CHECK_LUNATIC:
        if (lunatic.q == 1) {
          gameFSM.d = gameFSM.TEMP_STORE_COL0;
        }
        else {
          gameFSM.d = gameFSM.GAME_IDLE;
        }
        
      gameFSM.TEMP_STORE_COL0:
        alufn = ALDR;
        ra = 5h0;
        rc = 5h13;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.LEFT_COL0;
        
      gameFSM.LEFT_COL0:
        alufn = ALDR;
        ra = 5h1;
        rc = 5h0;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.LEFT_COL1;
        
      gameFSM.LEFT_COL1:
        alufn = ALDR;
        ra = 5h2;
        rc = 5h1;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.LEFT_COL2;
        
      gameFSM.LEFT_COL2:
        alufn = ALDR;
        ra = 5h3;
        rc = 5h2;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.LEFT_COL3;
        
      gameFSM.LEFT_COL3:
        alufn = ALDR;
        ra = 5h13;
        rc = 5h3;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
        
      gameFSM.RIGHT_SHIFTER_CHECK_LUNATIC:
        if (lunatic.q == 1) {
          gameFSM.d = gameFSM.TEMP_STORE_COL3;
        }
        else {
          gameFSM.d = gameFSM.GAME_IDLE;
        }
        
      gameFSM.TEMP_STORE_COL3:
        alufn = ALDR;
        ra = 5h3;
        rc = 5h13;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RIGHT_COL3;
      
      gameFSM.RIGHT_COL3:
        alufn = ALDR;
        ra = 5h2;
        rc = 5h3;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RIGHT_COL2;
        
      gameFSM.RIGHT_COL2:
        alufn = ALDR;
        ra = 5h1;
        rc = 5h2;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RIGHT_COL1;
        
      gameFSM.RIGHT_COL1:
        alufn = ALDR;
        ra = 5h0;
        rc = 5h1;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.RIGHT_COL0;
        
      gameFSM.RIGHT_COL0:
        alufn = ALDR;
        ra = 5h13;
        rc = 5h0;
        asel = 2b00;
        we = 1;
        
        gameFSM.d = gameFSM.GAME_IDLE;
    }
  }
}
